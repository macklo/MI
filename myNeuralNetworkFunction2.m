function [y1] = myNeuralNetworkFunction2(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 07-Jun-2019 19:51:59.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx13 matrix, input #1
% and returns:
%   y = Qx2 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1];
x1_step1.gain = [1;1;1;1;1;1;1;1;1;1;1;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.9407874224194578971;-1.7527225931273366921;0.46384536249198349278;-0.57253512014232355032;-0.43110427579874827098;1.4786045374613996373;0.58479437658322463989;1.3622744050167328034;0.77423560945409508616;-1.4690850163119897331];
IW1_1 = [0.41647424255656184666 -0.16007302060287159629 -0.27560791822528557526 2.9872088323918442043 1.1617387705265038722 -0.485467498278827847 0.35851907966171164821 -2.1483049525234405586 0.48145722179369010441 1.0519477878155658601 -1.5159560193436081299 0.67791209848344446964 -1.7126872134186308383;0.28737065134170991509 -0.06259875455364168062 0.064696108044586544961 -0.95781314125673844284 -0.11317939888484020161 7.854115641331424591 0.092866469993891365142 0.48755812337289022862 -2.5985037063110643096 0.5660430443462811656 2.2694419703541530708 -0.71541498931272473616 0.51248125451670645258;-0.49659924356913826005 -0.014966399887647823322 0.085191432488304949522 0.51337742857865897861 0.34638491669928922478 -0.48969981648928523343 -0.035687605445693791617 0.017504671598691613071 0.097025119239519494463 -0.50259354759143559654 -0.13372773394032300143 0.080372406025012707587 0.045223038913717220066;0.0087981282288908616712 -0.080946052372251178775 -0.083486801651541694969 0.1701284730248680821 0.082536693246726439144 0.69784198701310207191 0.11257045618839636725 -0.44812518659657929465 0.78766712016045670186 0.47905798384439501891 -0.4773313499222601175 0.34563606619862780045 0.10512637698521833107;0.40217336203945031059 0.067998445782324001829 -0.14223413125656372835 -0.42698533333363286602 -0.52970745825667131523 0.61965732100298787088 0.10747748640288005972 -0.018996615967710336892 -0.29442106542127882696 0.76180664564963274099 0.22742468942621521522 -0.027973144639018052149 -0.19049581275262475466;-0.019838475164061612765 0.029239325536561489721 -0.10537322612533232824 0.46212824830375570651 -0.00091412377253839672761 -5.3187408027887244089 -0.12103377258280165196 -0.4909183658725260746 1.8604401332473046171 0.10427125694128659694 -1.5332648172717244783 0.27820452320680977287 -0.29861374113098276828;0.072990513320410080333 0.041645193937275518103 0.10880732804499726463 -0.25696766504434848111 0.040900562026015267747 -0.74538332630493164821 -0.14266289098074116937 0.38825512088891667162 -0.68612699537267918259 -0.6816506122202414808 0.41180796865536517526 -0.40087780969265895958 -0.059977765769125411521;-0.12289681060396769052 -0.0090108662476134169378 -0.33823689959764358104 1.8402801247755813385 -0.30584079207490932895 -3.1697830559868021005 0.41127906878550718472 -0.88352501068400912665 -0.08685889163570938154 1.008298149500593377 0.93262431045726013057 0.70023337370576055338 -0.59084550103861499526;-0.020222420479170191004 0.13864743358514503013 0.1344802200742783449 -0.49963168930094392639 -0.3557921405606466192 -0.45800887714604610057 -0.18114502914821989377 0.8623420794819319779 -1.4521562382446357997 -0.42904851897323920129 0.78025349288340739573 -0.41585337253927934231 0.023574971464848094166;0.13173384908930380055 0.0091833930302783021993 0.35567236778738625658 -2.0657887185701144794 0.33247120529699453195 3.107093265445112884 -0.4652741841721518834 1.0178402978166931625 -0.10025742780536633925 -1.0214571679198898302 -0.70607109523921840477 -0.873405189760469991 0.62080688545008433366];

% Layer 2
b2 = [-0.50250157005865891957;-0.32912133462902309899];
LW2_1 = [-0.14046906155826102691 0.45982602768197500254 5.8849322239150820835 8.7803847840395814472 4.2091250321411513013 0.60713925260260481753 5.9025973500025807894 3.5043567892507789807 1.9684937154284909422 3.2543134442599614964;-0.16155590039022110771 0.39299447424006078711 4.881223482323768792 6.223650936275165968 3.3008091573386439954 0.51140711767986291036 4.0140055424474336832 3.0839485324386202159 1.4079917569252304865 2.9461132591192931152];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1];
y1_step1.xoffset = [-1;-1];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
