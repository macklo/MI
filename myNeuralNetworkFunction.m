function [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 07-Jun-2019 19:35:30.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 13xTS matrix, input #1
%   x2 = 2xTS matrix, input #2
%   xi1 = 13x2 matrix, initial 2 delay states for input #1.
%   xi2 = 2x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 2xTS matrix, output #1
%   xf1 = 13x2 matrix, final 2 delay states for input #1.
%   xf2 = 2x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1];
x1_step1.gain = [1;1;1;1;1;1;1;1;1;1;1;1;1];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-1;-1];
x2_step1.gain = [1;1];
x2_step1.ymin = -1;

% Layer 1
b1 = [1.8896275364639749661;-0.034462344807657536994;-0.778085549942166943;0.39342741063537978174;0.49574805981714348269;0.03057848817026134064;-0.0009690689956356733116;1.4336264787424457534;-0.86170847691906926613;-2.0244827129905584862];
IW1_1 = [0.17945205698077645873 0.014894430371665419097 -0.15603968585622440823 -0.036471611989384693231 -0.19072816482561905094 -0.091196837416569906387 0.22742296493738481389 0.17316595580316510028 0.22666918641829572612 0.29878459544475621801 -0.21373695213663679304 -0.74029650256570400657 0.25297816904773667845 0.47181488932260395863 -0.26387896454202830476 0.42645835405272586316 0.36982235165848248437 0.058426815167871959389 0.65839072250905494865 0.24843366562666907571 0.17409510426451041409 0.018799101683808563945 0.066924418550324618615 -0.58318178394118413976 0.1925260513386005401 0.08252889952971552423;-0.10473782473357724776 -0.034889269619335416817 -0.076476388560213520718 -0.19414120126449327386 0.015520928378716412205 0.15207748269575219191 -0.041513536148016949578 0.11435416439902520991 -0.060333814130023484534 -0.140530989798901218 -0.019102125778745100704 -0.058871158233519321756 0.26411328249747467733 -0.18651144016709064744 -0.099015444566350183098 0.16321075115960201329 0.11348851530656607622 0.098883209656738607629 0.12384261966683823841 -0.12288658189596658732 0.051642158051147628306 0.082038887181798941794 -0.11388793938330803168 -0.087254342716174146388 -0.028323315931292308845 -0.10575934552426462243;0.68051427580730150524 -0.026916383947761676754 0.19484820128210555978 0.08054910060729869592 0.13098835837748132316 0.25222906174272446966 0.10327848722302315765 -0.18367973231845768911 -0.2052469766401384399 0.20394910232582319498 -0.47301286007446652349 0.24996106129676409768 0.21878701440462214323 0.063907165112341859925 -0.11353152705180569182 -0.25824231539500253074 0.21049197792467883028 -0.067249005312329121486 0.045598154532749943235 0.010067217092018031915 0.037704487487565559178 0.21776427346469667823 -0.35550770575817031149 -0.0071646741632520570542 0.30782735661398125115 -0.26271778370451159823;0.31026916541764049118 0.05045167571777462584 0.23647901889295253053 0.27737988759116249948 0.39832900094980072669 0.0265976462463729732 -0.0023979494081896954999 0.089237377043188376158 0.086299683186157605252 0.24192429121394121161 0.10042200579926023607 -0.14303827796063856015 0.020256727517960697316 0.24817218129331128362 0.091263970546620207247 -0.26153534152331642249 -0.20233155986630260714 -0.52614842098742253818 0.06306003188159538253 0.082124556270095072641 -0.6329152614126568599 -0.14665841645842012109 -0.07273966967424094765 0.010913454595009705952 0.33837606856679181 -0.11298028271462844108;-0.45775275661164271934 -0.12277535408438615405 -0.0087317215496035896494 -0.34396785491276943292 -0.17968726835455936519 0.023299707076521146421 -0.1003700267239595878 0.53838484610309711442 -0.080747077500224931357 -0.56646985922293735527 -0.1115361965843498504 0.063318260777908919046 0.37294246924033469526 -0.68764402563469673169 -0.23882174415797852163 0.16715021509160965518 0.06725140781313013183 0.39997035423807902887 0.2034310706131787494 -0.25575735593921611333 0.57965282063284739866 0.12095515860623262672 -0.40121975286627153956 -0.041026124505652815377 -0.7810689020287150397 -0.035536427744690235464;0.22086196153806320064 0.048948455099970339388 0.21465001235117825429 0.38617551288496759776 0.080419481663540223759 -0.17996447288517841701 0.027704440628765449744 -0.026060300827772681781 0.083533865602690687835 0.26004672448126908701 -0.0089390328338735877689 0.067448570017539191679 -0.25702090650729081389 0.22170689910478480478 0.11875892749322256026 -0.31880000106488287637 -0.25614471948155603798 -0.25845558926282269363 -0.13008326896118430072 0.13824331355824492906 -0.22432011370612245371 -0.11723147740740746947 -0.022231898647469335029 0.13112732823473502441 0.12535584350407075194 0.028533717979512450424;0.23958916867208299162 -0.025352839198999683329 0.60248822721319861273 0.36780534694658001404 -0.017221983708934629487 -0.17670692661518450084 -0.038362226136753933836 0.52746851867453470319 0.019517801324508584487 0.24357943863524181283 -0.17770216919559256308 0.12339792119656339819 0.16007154105972318248 -0.25245968156952125483 -0.044970797117083904926 -0.63709707562637973854 -0.23083629722015502894 -0.063259354499302145047 0.18716058186867587376 -0.0046062383416287152466 -0.17062317375323560187 -0.11038689108417737428 -0.90432256748517503286 0.20741755652078031069 -0.38176613681546628376 -0.24028970564565035883;0.42485019041130672734 -0.11628869970830768565 -0.17530900431913909454 0.47543153887147843184 -0.1555018031758735042 -0.14344523198668698849 0.11088286909594696761 0.22531254758300153784 -0.19871646211007221172 -0.18914981507387576554 -0.11505480590692419851 0.53915137111883992826 -0.27771784749903227763 0.70988188271794205875 -0.022258475999654886435 -0.26344400885822105707 0.45279896873013480985 -0.14489299680413203486 0.50991316088548455099 0.023340571028879840421 0.39647484762364965105 -0.25693536764368873904 0.26901064934455393152 -0.2351060002504183899 0.06173628476458024178 -0.41216796411471756656;-0.49874612109361060597 -0.086319853565028761833 -0.19318186838103429404 -0.46052052646618402143 -0.5220963672480848361 0.037834389412672260466 -0.064977882056368702068 0.074370056681769519669 -0.12914531504206819279 -0.41452021502909858208 -0.088011411524988591992 0.096961361394906811495 0.2209286584112246099 -0.5258421165802715791 -0.20025393014294662342 0.30518371268658023299 0.18351760957198487434 0.73296311244232348336 0.062991623059721585376 -0.22966637713121651476 0.89330508813609166285 0.19021896439767035925 -0.19770060342859269165 -0.0063116992147924065593 -0.61600648088093723498 0.024293284320759070405;-0.055928006097698886034 0.42597439970312128699 -0.22158295681185247172 -0.58209306063983645707 -0.66974840029300264366 -0.11363125320659681061 0.099394248546039926095 -0.3290648150840589925 -0.080543048382707232991 0.42468225244635576798 -0.089614952274801110144 0.02678331157350457431 -0.31868551050734611474 0.03382425085326331432 0.53541380518421832768 0.2698939738711355063 -0.6545712700066628198 -0.29593463135666503439 -0.56432535218838109081 -0.3850911787897565719 -0.53789152565781694904 -0.040268675142436989589 0.016599207310352435962 0.25243643600115062142 0.25314561073149982606 -0.041168091712578257224];
IW1_2 = [0.63336811039531204504 0.43814124728127157304 0.7929223327302107327 0.99526681406078387759;-1.0710956514768699144 0.98675098795924953698 0.24007283211256735811 0.16182429948785004292;0.52649144215583709716 1.0544003614555390591 0.35829154532620993701 1.023887474831337796;0.42154827331882382957 -0.10698456841664656658 0.35890825569498990832 -0.46338943870067861308;0.17315830196134585073 0.47311275621872150854 -0.18687220188676775812 0.88229909297087405484;-0.96849150870366396138 1.407578160609611162 0.083896414320023204869 -0.43197074947680619283;0.3415198299514392577 0.29155536405334886441 0.26556823689552899737 0.48907997101598965628;0.36889381738159876534 0.22253401192603594616 0.34463245813557230601 0.45713927838750539889;-0.26169687165583244148 0.35586385383208740674 -0.26889587124850100608 0.82383029535238183616;0.4068883634029911156 -0.37810565077101765397 -0.090545640805712312993 -0.068161574007680386655];

% Layer 2
b2 = [0.17937523607485988952;0.15531831946362223418];
LW2_1 = [0.34820761249273096682 -0.85247211372299869225 0.25076286976885076019 1.4269895462291970478 0.618856463280597624 0.34566732323657656245 -0.56128349272874067388 0.34391510650594325771 1.0912885031338688258 0.76671635092188450411;0.3088934155411251492 -0.38113675157832749285 0.22317856914191372408 1.2280831308178949968 0.57329911723675353041 0.69358903844768649005 -0.57250384227881723209 0.27896973407254438415 1.0076330391593237845 0.60848937923275625561];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1];
y1_step1.xoffset = [-1;-1];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(13,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(2,1)];

% Allocate Outputs
y1 = zeros(2,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),26,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),4,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
